## Key Principles

### What NOT to Do

1. **Don't fabricate information** - Only include what was actually discussed in the conversation
2. **Don't force-add sections** - If alternatives weren't considered, don't make them up
3. **Don't repeat information** - Avoid duplicating the same points across different sections
4. **Don't add artificial negatives** - Don't invent downsides like "requires updating existing code" unless they were genuine concerns discussed
5. **Don't pad content** - Keep it focused on the actual decision and reasoning

### What TO Do

1. **Be concise and direct** - Get to the point quickly
2. **Capture only real reasoning** - Include the actual thoughts and concerns that led to the decision
3. **Skip empty sections** - If there's nothing meaningful to say, omit the section entirely
4. **Focus on business value** - Emphasize why this decision matters for the business
5. **Always writ ein English** - If it is not explicitly stated that the ADR should be in Polish, write in English.

## ADR Template

### Full Template (use for complex decisions)

```markdown
# ADR - [Short Decision Title] ([YYYY-MM-DD])

## Status
[Accepted/Proposed/Deprecated/Superseded]

## Context
[Which area/system this affects]

## Business Context
[What business problem or need drove this decision]

## Technical Context
[Current technical situation, constraints, requirements]

## Decision
[What was decided - include code examples if relevant]

## Justification
[Why this decision was made - the actual reasoning discussed]

## Implications
[What this means for the system going forward]

## Relationship to DDD Model
[How this relates to bounded contexts, domain model, etc.]
```

### Minimal Template (use for straightforward decisions)

```markdown
# ADR - [Short Decision Title] ([YYYY-MM-DD])

## Status
[Accepted/Proposed/Deprecated/Superseded]

## Context
[Brief description of what this affects]

## Decision
[What was decided]

## Justification
[Why this decision was made]
```

## Section Guidelines

### Context

- Keep it brief - just enough to understand the area affected
- Don't over-explain if it's obvious from the title

### Business Context

- Only include if there's a clear business driver
- Skip if the decision is purely technical

### Technical Context

- Focus on constraints and current state that influenced the decision
- Don't list everything about the current system

### Decision

- Be specific about what was decided
- Include code examples only if they clarify the decision
- Keep examples concise

### Justification

- This is the most important section
- Include the actual reasoning that was discussed
- Number points if there are multiple reasons
- Don't invent benefits that weren't discussed

### Implications

- What this decision means going forward
- Only include if there are meaningful implications
- Skip if the implications are obvious

### Relationship to DDD Model

- Only include for decisions that significantly impact domain boundaries or architecture
- Keep it focused on the actual DDD implications

## Quality Checklist

Before finalizing an ADR, ask:

1. Did I make up any information that wasn't in the conversation?
2. Am I repeating the same point in multiple sections?
3. Are there sections that add no value and could be removed?
4. Is the justification based on actual reasoning from the discussion?
5. Could this be shorter while still capturing the essential decision?

## Examples of What to Avoid

**Bad Justification:** "This approach is more scalable, maintainable, and follows best practices." _(Generic benefits that weren't discussed)_

**Good Justification:** "Eliminates need for array splitting operations in Make.com scenarios, which was causing complexity in our webhook processing." _(Specific problem that was actually discussed)_

**Bad Implications:** "Will require updating existing code and thorough testing." _(Generic implementation concerns)_

**Good Implications:** "All Make.com scenarios processing WooCommerce events must expect domain data under 'payload' object." _(Specific, actionable implication)_